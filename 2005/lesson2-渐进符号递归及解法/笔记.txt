Asymptotic notation
  - O notation (<=)
    f(n) = O(g(n)) if there exist constants c > 0, n0 > 0 such
    that 0 ≤ f(n) ≤ cg(n) for all n ≥ n0.
    e.g. 2n^2 = O(n^3) (c = 1, n0 = 2)
         actually means 2n^2 ∈ O(n^3)

    Convention:
      A set in a formula represents an anonymous function in the set.
        f(n) = n^3 + O(n^2) means there's a function f(n) = n^3 + h(n)
        for some h(n) ∈ O(n2)

  - Ω-notation (>=)
    Ω(g(n)) = f(n)
      there exist constants c > 0, n0 > 0 suchthat 0 ≤ cg(n) ≤ f(n) 
      for all n ≥ n 0 
    e.g. √n = Ω(lgn) (c = 1, n0 = 16) 

  - Θ-notation (=)
    Θ(g(n)) = O(g(n)) ∩ Ω(g(n))

  - o-notation (<)

  - ω-notation (>)


Solving recurrences
  - substitution method
    1. Guess the form of the solution.
    2. Recursion-tree method
      e.g. T(n) = T(n/4) + T(n/2) + n^2
                        n^2                         1
              (n/4)^2         (n/2)^2              5/16
        (n/16)^2  (n/8)^2   (n/8)^2   T(n/4)^2    25/256
        ....       ....       ....      ......     ...
        Θ(1)                                       ...
      geometric series:
        Total <= n2(1+ 5/16 + (5/16)^2 + (5/16)^3 + ...)
              <= 2n^2
              = Θ(n^2)
    3. Master method
      The master method applies to recurrences of the form T(n) = aT(n/b) + f(n),
      where a ≥ 1, b > 1, and f is asymptotically positive.(There is n0 where n > n0 
      make f(n) is postive.)
      Then we compare f(n) with blogb^a:
      Case 1:
        f(n) = O(n^(logb(a) – ε)) for some constant ε > 0.
        f(n) grows polynomially slower than nlogb^a (by an n^ε factor).
        Solution: T(n) = Θ(n^logb(a)) 
      Case 2:
        f(n) = Θ(n^logb(a) * (lg(k) * n)) for some constant k ≥ 0.
        f(n) and n^logb^a grow at similar rates
        Solution: T(n) = Θ(n^logb(a) * lg(k+1) * n)
      Case 3:
        f(n) = Ω(n^(logb(a) + ε)) for some constant ε > 0.
        f(n) grows polynomially faster than n^logb^a (by an n^ε factor)
        and f(n) satisfies the regularity condition that af(n/b) ≤ cf(n) 
        for some constant c < 1
        Solution: T(n) = Θ(f(n))
